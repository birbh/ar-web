name: Deploy to VPS
            - name: Upload a Build Artifact
  uses: actions/upload-artifact@v4.4.3
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
    # The level of compression for Zlib to be applied to the artifact archive. The value can range from 0 to 9: - 0: No compression - 1: Best speed - 6: Default compression (same as GNU Gzip) - 9: Best compression Higher levels will result in better compression, but will take longer to complete. For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.

    compression-level: # optional, default is 6
    # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.

    overwrite: # optional, default is false
    # If true, hidden files will be included in the artifact. If false, hidden files will be excluded from the artifact.

    include-hidden-files: # optional, default is false
          

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (staging or production)'
        required: true
        default: staging

jobs:
  deploy:
    name: Deploy Application on VPS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: |
            ${{ secrets.VPS_PRIVATE_KEY }}

      - name: Define Target Environment
        id: env
        run: echo "TARGET_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      - name: Validate Secrets
        run: |
          if [[ -z "${{ secrets.VPS_PRIVATE_KEY }}" || -z "${{ secrets.PROD_VPS_HOST }}" || -z "${{ secrets.PROD_VPS_USER }}" ]]; then
            echo "Required secrets are missing. Exiting..."
            exit 1
          fi

      - name: Add VPS to Known Hosts
        run: |
          ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Check Target Environment
        run: |
          echo "Deploying to ${{ env.TARGET_ENV }}"
          if [[ "${{ env.TARGET_ENV }}" == "production" ]]; then
            echo "Deploying to Production VPS"
            echo "VPS_HOST=${{ secrets.PROD_VPS_HOST }}" >> $GITHUB_ENV
            echo "VPS_USER=${{ secrets.PROD_VPS_USER }}" >> $GITHUB_ENV
          else
            echo "Deploying to Staging VPS"
            echo "VPS_HOST=${{ secrets.STAGING_VPS_HOST }}" >> $GITHUB_ENV
            echo "VPS_USER=${{ secrets.STAGING_VPS_USER }}" >> $GITHUB_ENV

      - name: Validate Build
        run: npm run test

      - name: Copy Files to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p ~/app/${{ env.TARGET_ENV }}"
          rsync -az --delete ./ ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:~/app/${{ env.TARGET_ENV }}

      - name: Install Dependencies
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ~/app/${{ env.TARGET_ENV }} && npm install --production
          "

      - name: Restart Server
        run: |
          if [[ "${{ env.TARGET_ENV }}" == "production" ]]; then
            ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "sudo systemctl restart production-server"
          else
            ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "sudo systemctl restart staging-server"
          fi
